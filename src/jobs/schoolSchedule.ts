/* eslint-disable max-len */
/* eslint-disable prettier/prettier */
/* eslint-disable @typescript-eslint/no-unused-vars */
import logger from 'logger';
import { sendMessage } from 'services/facebook';
import { UserModel } from 'models';
import { schoolScheduleService } from 'services/ctms/schoolSchedule';

const message = (text: string, session: any[]) => {
  return `${text} nha:\n-----------------\nGi·ªù: ${session[1]}\nPh√≤ng: ${session[2]}\nM√¥n h·ªçc: ${session[3]}\nGi·∫£ng vi√™n: ${session[4]}\nL·ªõp: ${session[5]}`
}

export const morningSchedule = async () => {
  try {
    const users: any[] = await UserModel.find({ isTrackTimetable: true });
    for (const user of users) {
      const timeTable: any = await schoolScheduleService(user.username, user.password);

      if (timeTable.isExpired) { 
        
        await sendMessage(user.subscribedID, {
          text:'T√†i kho·∫£n CTMS c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n, vui l√≤ng g·ª≠i mail theo h∆∞·ªõng d·∫´n ƒë·ªÉ d√πng ti·∫øp d·ªãch v·ª• nha!ü•≤',
        });

        logger.warn(`User ${user.username} is expired! ${new Date()}`);

        continue;
      }
      

      const sessionOne = timeTable?.sessionOne;
    
      if (sessionOne?.length > 0 && sessionOne[sessionOne?.length - 1] === 'H·ªçc') {
         await sendMessage(user.subscribedID, {
          text: message(`üìù B·∫°n c√≥ m√¥n h·ªçc v√†o bu·ªïi s√°ng`, sessionOne),
        });

        logger.warn(`User ${user.username} has a class in the morning! ${new Date()}`);
      }

      if (sessionOne?.length > 0 && sessionOne[sessionOne?.length - 1] === 'H·ªçc tr·ª±c tuy·∫øn') {
         await sendMessage(user.subscribedID, {
          text: message(`üìù B·∫°n c√≥ m√¥n h·ªçc tr·ª±c tuy·∫øn v√†o bu·ªïi s√°ng`, sessionOne),
        });

        logger.warn(`User ${user.username} has a online class in the morning! ${new Date()}`);
      }

      if (sessionOne?.length > 0 && sessionOne[sessionOne?.length - 1] === 'Ngh·ªâ') {      
         await sendMessage(user.subscribedID, {
          text: message(`üÜòüÜòüÜò M√¥n h·ªçc s√°ng nay c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy (ho·∫∑c ngh·ªâ h·ªçc)`, sessionOne),
        });

        logger.warn(`User ${user.username} class this morning has been canceled! ${new Date()}`);
      }

      if (sessionOne?.length > 0 && sessionOne[sessionOne?.length - 1] === 'Ngo·∫°i kho√°') {
        await sendMessage(user.subscribedID, {
          text: message(`B·∫°n c√≥ m·ªôt bu·ªïi h·ªçc ngo·∫°i kho√°`, sessionOne),
        });

        logger.warn(`User ${user.username} have an extra-curricular session! ${new Date()}`);
      }
    }
  } catch (error) {
    logger.error(error);
  }
};

export const noonSchedule = async () => {
  try {
    const users: any[] = await UserModel.find({ isTrackTimetable: true });
    for (const user of users) {
      const timeTable: any = await schoolScheduleService(user.username, user.password);

      if (timeTable.isExpired) { 
        
        await sendMessage(user.subscribedID, {
          text:'T√†i kho·∫£n CTMS c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n, vui l√≤ng g·ª≠i mail theo h∆∞·ªõng d·∫´n ƒë·ªÉ d√πng ti·∫øp d·ªãch v·ª• nha!ü•≤',
        });

        logger.warn(`User ${user.username} is expired! ${new Date()}`);

        continue;
      }

      const sessionTwo = timeTable?.sessionTwo;

      if (sessionTwo?.length > 0 && sessionTwo[sessionTwo?.length - 1] === 'H·ªçc') {        
         await sendMessage(user.subscribedID, {
          text: message(`üìù B·∫°n c√≥ m√¥n h·ªçc v√†o bu·ªïi chi·ªÅu`, sessionTwo),
        });

        logger.warn(`User ${user.username} has a class in the afternoon! ${new Date()}`);
      }
      
      if (sessionTwo?.length > 0 && sessionTwo[sessionTwo?.length - 1] === 'H·ªçc tr·ª±c tuy·∫øn') {        
         await sendMessage(user.subscribedID, {
          text: message(`üìù B·∫°n c√≥ m√¥n h·ªçc tr·ª±c tuy·∫øn v√†o bu·ªïi chi·ªÅu`, sessionTwo),
        });

        logger.warn(`User ${user.username} has a online class in the afternoon! ${new Date()}`);
      }

      if (sessionTwo?.length > 0 && sessionTwo[sessionTwo?.length - 1] === 'Ngh·ªâ') {        
         await sendMessage(user.subscribedID, {
          text: message(`üÜòüÜòüÜò M√¥n h·ªçc chi·ªÅu nay c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy (ho·∫∑c ngh·ªâ h·ªçc)`, sessionTwo),
        });

        logger.warn(`User ${user.username} class this afternoon has been canceled! ${new Date()}`);
      }

      if (sessionTwo?.length > 0 && sessionTwo[sessionTwo?.length - 1] === 'Ngo·∫°i kho√°') {
        await sendMessage(user.subscribedID, {
          text: message(`B·∫°n c√≥ m·ªôt bu·ªïi h·ªçc ngo·∫°i kho√°`, sessionTwo),
        });

        logger.warn(`User ${user.username} have an extra-curricular session! ${new Date()}`);
      }
    }
  } catch (error) {
    logger.error(error);
  }
};

export const eveningSchedule = async () => {
  try {
    const users: any[] = await UserModel.find({ isTrackTimetable: true });
    for (const user of users) {
      const timeTable: any = await schoolScheduleService(user.username, user.password);

      if (timeTable.isExpired) { 
        
        await sendMessage(user.subscribedID, {
          text:'T√†i kho·∫£n CTMS c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n, vui l√≤ng g·ª≠i mail theo h∆∞·ªõng d·∫´n ƒë·ªÉ d√πng ti·∫øp d·ªãch v·ª• nha!ü•≤',
        });

        logger.warn(`User ${user.username} is expired! ${new Date()}`);

        continue;
      }

      const sessionThree = timeTable?.sessionThree;

      if (sessionThree?.length > 0 && sessionThree[sessionThree?.length - 1] === 'H·ªçc') {        
         await sendMessage(user.subscribedID, {
          text: message(`üìù B·∫°n c√≥ m√¥n h·ªçc v√†o bu·ªïi t·ªëi`, sessionThree),
        });

        logger.warn(`User ${user.username} has a class in the evening! ${new Date()}`);
      }

      if (sessionThree?.length > 0 && sessionThree[sessionThree?.length - 1] === 'H·ªçc tr·ª±c tuy·∫øn') {        
         await sendMessage(user.subscribedID, {
          text: message(`üìù B·∫°n c√≥ m√¥n h·ªçc tr·ª±c tuy·∫øn v√†o bu·ªïi t·ªëi`, sessionThree),
        });

        logger.warn(`User ${user.username} has a online class in the evening! ${new Date()}`);
      }

      if (sessionThree?.length > 0 && sessionThree[sessionThree?.length - 1] === 'Ngh·ªâ') {
         await sendMessage(user.subscribedID, {
          text: message(`üÜòüÜòüÜò M√¥n h·ªçc t·ªëi nay c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy (ho·∫∑c ngh·ªâ h·ªçc)`, sessionThree),
        });

        logger.warn(`User ${user.username} class this evening has been canceled! ${new Date()}`);

      }

      if (sessionThree?.length > 0 && sessionThree[sessionThree?.length - 1] === 'Ngo·∫°i kho√°') {
        await sendMessage(user.subscribedID, {
          text: message(`B·∫°n c√≥ m·ªôt bu·ªïi h·ªçc ngo·∫°i kho√°`, sessionThree),
        });

        logger.warn(`User ${user.username} have an extra-curricular session! ${new Date()}`);
      }
    }
  } catch (error) {
    logger.error(error);
  }
};

